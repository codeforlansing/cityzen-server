name: Tag, Release, and Publish on Version Change

on:
  push:
    branches:
    - master

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.released.outputs.status }}
    steps:
    - uses: actions/checkout@v2
    # Creates a new tag when a new version is discovered in package.json
    - uses: butlerlogic/action-autotag@stable
      id: autotag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_prefix: "v"
    # Creates a new release only when a new tag was just created
    - uses: actions/create-release@v1
      id: autorelease
      if: steps.autotag.outputs.tagname != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.autotag.outputs.tagname }}
        release_name: Release ${{ steps.autotag.outputs.tagname }}
        draft: false
        prerelease: ${{ contains(steps.autotag.outputs.tagname, '-') }}
    # Set job output to indicate whether release was created
    - id: released
      if: success() && steps.autotag.outputs.tagname != ''
      run: echo "::set-output name=status::yes"

  publish-npm:
    needs: build
    if: needs.build.outputs.released == 'yes'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: https://registry.npmjs.org/
      - run: npm ci
      - run: npm run lint
      - run: npm test
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  publish-gpr:
    needs: build
    if: needs.build.outputs.released == 'yes'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: https://npm.pkg.github.com/
      - run: npm ci
      - run: npm run lint
      - run: npm test
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  publish-executables:
    needs: build
    if: needs.build.outputs.released == 'yes'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - run: npm ci
      - run: npm run lint
      - run: npm test
      - name: package for unix
        run: |
          npm run package
          zip cityzen-server.zip cityzen-server
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
      - name: package for windows
        run: |
          npm run package
          Compress-Archive cityzen-server.exe cityzen-server.zip
        if: ${{ matrix.os == 'windows-latest' }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-release.outputs.upload_url }}
          asset_path: ./cityzen-server.zip
          asset_name: cityzen-server-${{ matrix.os }}.zip
          asset_content_type: application/zip

  release-assets:
    needs: build
    if: needs.build.outputs.released == 'yes'
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - run: npm ci
      - run: npm run lint
      - run: npm test
      - run: npm run package -- --build
      - run: zip dist/cityzen-server* cityzen-server.zip
      - id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its
          # outputs object, which include a `upload_url`. See this blog post for more info:
          # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cityzen-server.zip
          asset_name: cityzen-server.zip
          asset_content_type: application/zip
